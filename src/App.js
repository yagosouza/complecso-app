import React, { useState, useMemo } from 'react';
import { User, Lock, CalendarDays, CheckCircle2, PlusCircle, LogOut, X, AlertTriangle, ChevronLeft, ChevronRight, Edit3, Shield, Users, Repeat, KeyRound, UserCog, Search } from 'lucide-react';

// --- DADOS MOCK (Simulando um banco de dados) ---
const CLASS_TYPES = ['Futevôlei', 'Beach Tennis', 'Funcional'];
const today = new Date();
const createDate = (day, hour, monthOffset = 0) => {
    const d = new Date(today.getFullYear(), today.getMonth() + monthOffset, day, hour, 0);
    return d;
};

// Adicionado mais detalhes ao usuário: status, phone, email, birthDate
const initialUsers = [
  { id: 200, name: 'Admin', role: 'admin', username: 'admin', password: 'password', status: 'active' },
  { id: 1, name: 'Ana Júlia', role: 'student', username: 'ana', password: 'password', status: 'active', phone: '11999990001', email: 'ana@email.com', birthDate: '2000-05-10', plan: { name: 'Plano 6 Aulas', total: 6, extraClasses: [] }, checkedInClassIds: [], enrolledIn: ['Futevôlei'] },
  { id: 2, name: 'Bruno Costa', role: 'student', username: 'bruno', password: 'password', status: 'active', phone: '11999990002', email: 'bruno@email.com', birthDate: '1998-11-20', plan: { name: 'Plano 8 Aulas', total: 8, extraClasses: [] }, checkedInClassIds: [1], enrolledIn: ['Futevôlei', 'Beach Tennis'] },
  { id: 3, name: 'Carlos Dias', role: 'student', username: 'carlos', password: 'password', status: 'inactive', phone: '11999990003', email: 'carlos@email.com', birthDate: '2002-01-30', plan: { name: 'Plano 8 Aulas', total: 8, extraClasses: [] }, checkedInClassIds: [], enrolledIn: ['Beach Tennis'] },
  { id: 4, name: 'Fernanda Lima', role: 'student', username: 'fernanda', password: 'password', status: 'active', phone: '11999990004', email: 'fernanda@email.com', birthDate: '1999-07-22', plan: { name: 'Plano 6 Aulas', total: 6, extraClasses: [] }, checkedInClassIds: [2], enrolledIn: ['Funcional', 'Futevôlei'] },
  { id: 100, name: 'Professor Alex', role: 'teacher', username: 'alex', password: 'password', status: 'active', phone: '11988880001', email: 'alex@email.com', birthDate: '1990-03-15', specialties: ['Futevôlei', 'Funcional'] },
  { id: 101, name: 'Professora Bia', role: 'teacher', username: 'bia', password: 'password', status: 'active', phone: '11988880002', email: 'bia@email.com', birthDate: '1992-10-05', specialties: ['Beach Tennis'] },
];

const initialClasses = [
  { id: 1, date: createDate(15, 18), maxStudents: 10, checkedInStudents: [2], teacherId: 100, type: 'Futevôlei' },
  { id: 2, date: createDate(16, 19), maxStudents: 8, checkedInStudents: [4], teacherId: 101, type: 'Beach Tennis' },
  { id: 3, date: createDate(17, 18), maxStudents: 10, checkedInStudents: [], teacherId: 100, type: 'Funcional' },
  { id: 4, date: createDate(2, 19, 1), maxStudents: 8, checkedInStudents: [], teacherId: 100, type: 'Futevôlei' },
  { id: 5, date: createDate(3, 17, 1), maxStudents: 12, checkedInStudents: [], teacherId: 101, type: 'Beach Tennis' },
  { id: 6, date: createDate(2, 18, 1), maxStudents: 10, checkedInStudents: [], teacherId: 100, type: 'Funcional' },
];

// --- UTILS ---
const maskPhone = (value) => {
    if (!value) return "";
    value = value.replace(/\D/g,'');
    value = value.replace(/^(\d{2})(\d)/g,"($1) $2");
    value = value.replace(/(\d)(\d{4})$/,"$1-$2");
    return value;
}

// --- COMPONENTES DA APLICAÇÃO ---

function ConfirmModal({ isOpen, onClose, onConfirm, title, children }) {
    if (!isOpen) return null;
    return (<div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4"><div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md"><div className="flex items-start"><div className="flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10"><AlertTriangle className="h-6 w-6 text-red-600" /></div><div className="ml-4 text-left"><h3 className="text-lg leading-6 font-medium text-gray-900">{title}</h3><div className="mt-2"><p className="text-sm text-gray-600">{children}</p></div></div></div><div className="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse"><button type="button" onClick={onConfirm} className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none sm:ml-3 sm:w-auto sm:text-sm">Confirmar</button><button type="button" onClick={onClose} className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none sm:mt-0 sm:w-auto sm:text-sm">Cancelar</button></div></div></div>);
}

function LoginPage({ onLogin }) {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const handleLogin = (e) => { e.preventDefault(); setError(''); onLogin(username, password, (err) => { if(err) setError(err); }); };
  return (<div className="bg-gray-100 flex items-center justify-center min-h-screen"><div className="w-full max-w-sm p-8 space-y-8 bg-white rounded-2xl shadow-lg"><div className="text-center"><h1 className="text-4xl font-bold text-black">Complecso App</h1><p className="mt-2 text-gray-600">Faça seu login para continuar</p></div><form className="space-y-6" onSubmit={handleLogin}><div><label htmlFor="username" className="text-sm font-medium text-gray-700">Usuário</label><div className="mt-1"><input id="username" type="text" value={username} onChange={e => setUsername(e.target.value)} required className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" /></div></div><div><label htmlFor="password" className="text-sm font-medium text-gray-700">Senha</label><div className="mt-1"><input id="password" type="password" value={password} onChange={e => setPassword(e.target.value)} required className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" /></div></div>{error && <p className="text-sm text-red-600 text-center">{error}</p>}<button type="submit" className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-bold text-black bg-[#ddfb3b] hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#e3fc5b] transition-all duration-300"><Lock className="h-5 w-5 mr-2" />Entrar</button></form></div></div>);
}

function MonthNavigator({ displayedDate, onPrevious, onNext }) {
    const formattedMonth = displayedDate.toLocaleString('pt-BR', { month: 'long', year: 'numeric' });
    return (<div className="flex items-center justify-between mb-4 bg-white p-4 rounded-lg shadow-sm"><button onClick={onPrevious} className="p-2 rounded-full hover:bg-gray-100"><ChevronLeft className="h-6 w-6 text-gray-700" /></button><h3 className="text-xl font-bold text-black capitalize">{formattedMonth}</h3><button onClick={onNext} className="p-2 rounded-full hover:bg-gray-100"><ChevronRight className="h-6 w-6 text-gray-700" /></button></div>);
}

function StudentDashboard({ student, classes, allUsers, onCheckIn, onCancelCheckIn, displayedDate, onPreviousMonth, onNextMonth }) {
    const extraClassesForMonth = student.plan.extraClasses?.find(ec => ec.month === `${displayedDate.getFullYear()}-${displayedDate.getMonth()}`)?.count || 0;
    const remainingClasses = student.plan.total + extraClassesForMonth - student.plan.usedInMonth;
    const hasCredits = remainingClasses > 0;
    return (<div className="p-4 md:p-8 space-y-8"><div className="bg-white p-6 rounded-xl shadow-md flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4"><div><h2 className="text-2xl font-bold text-black">Olá, {student.name}!</h2><p className="text-gray-700">Seu plano: <strong>{student.plan.name}</strong></p><p className="text-gray-700">Modalidades: <strong>{student.enrolledIn.join(', ')}</strong></p></div><div className="text-center bg-gray-50 p-4 rounded-lg w-full sm:w-auto"><p className="font-semibold text-gray-800">Créditos para {displayedDate.toLocaleString('pt-BR', { month: 'long' })}</p><p className={`text-4xl font-bold ${hasCredits ? 'text-black' : 'text-red-500'}`}>{remainingClasses}</p><p className="text-sm text-gray-600">de {student.plan.total + extraClassesForMonth} disponíveis</p></div></div><div><MonthNavigator displayedDate={displayedDate} onPrevious={onPreviousMonth} onNext={onNextMonth} /><div className="space-y-4">{classes.length > 0 ? classes.map(cls => { const isFull = cls.checkedInStudents.length >= cls.maxStudents; const isCheckedIn = student.checkedInClassIds.includes(cls.id); const classDate = cls.date.toLocaleDateString('pt-BR', { weekday: 'long', day: '2-digit', month: '2-digit' }); const classTime = cls.date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }); const teacher = allUsers.find(u => u.id === cls.teacherId); return (<div key={cls.id} className="bg-white p-5 rounded-lg shadow-sm flex flex-col md:flex-row justify-between items-center"><div className="mb-4 md:mb-0 text-left mr-auto"><p className="font-bold text-lg text-black capitalize">{cls.type}: {classDate} - {classTime}</p><p className="text-sm text-gray-600">Professor(a): {teacher ? teacher.name : 'N/A'}</p><p className="text-sm text-gray-600">Vagas: {cls.checkedInStudents.length} / {cls.maxStudents}</p></div><div>{isCheckedIn ? (<button onClick={() => onCancelCheckIn(student.id, cls.id)} className="w-full md:w-auto px-6 py-2 text-sm font-semibold text-red-700 bg-red-100 rounded-full hover:bg-red-200">Cancelar Check-in</button>) : (<button onClick={() => onCheckIn(student.id, cls.id)} disabled={isFull || !hasCredits} className="w-full md:w-auto px-6 py-2 text-sm font-bold text-black bg-[#ddfb3b] rounded-full hover:opacity-90 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center justify-center gap-2"><CheckCircle2 className="h-5 w-5" />{!hasCredits ? 'Sem créditos' : isFull ? 'Turma Cheia' : 'Fazer Check-in'}</button>)}</div></div>);}) : <p className="text-center text-gray-500 bg-white p-8 rounded-lg">Nenhuma aula da sua modalidade marcada para este mês.</p>}</div></div></div>);
}

function TeacherDashboard({ currentUser, classes, users, onCreateClass, onDeleteClass, displayedDate, onPreviousMonth, onNextMonth }) {
    const [date, setDate] = useState(''); const [time, setTime] = useState(''); const [maxStudents, setMaxStudents] = useState(10); const [classType, setClassType] = useState(currentUser.specialties[0] || ''); const [showCreateForm, setShowCreateForm] = useState(false);
    const handleCreateClass = (e) => { e.preventDefault(); if(date && time && classType) { const [year, month, day] = date.split('-'); const [hour, minute] = time.split(':'); onCreateClass({ date: new Date(year, month - 1, day, hour, minute), maxStudents: parseInt(maxStudents), type: classType }, currentUser.id); setDate(''); setTime(''); setMaxStudents(10); setShowCreateForm(false); } };
    const students = useMemo(() => users.filter(u => u.role === 'student'), [users]);
    return (<div className="p-4 md:p-8 space-y-8"><div className="flex justify-between items-center mb-6"><h2 className="text-2xl font-bold text-black">Minhas Aulas</h2><button onClick={() => setShowCreateForm(!showCreateForm)} className="flex items-center gap-2 px-4 py-2 text-sm font-bold text-black bg-[#ddfb3b] rounded-full hover:opacity-90"><PlusCircle className="h-5 w-5" />{showCreateForm ? 'Fechar' : 'Nova Aula'}</button></div>{showCreateForm && (<div className="bg-white p-6 rounded-xl shadow-md"><form onSubmit={handleCreateClass} className="space-y-4"><h3 className="text-lg font-semibold text-black">Adicionar nova aula</h3><div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"><div><label htmlFor="date" className="block text-sm font-medium text-gray-700">Data</label><input type="date" id="date" value={date} onChange={e => setDate(e.target.value)} required className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"/></div><div><label htmlFor="time" className="block text-sm font-medium text-gray-700">Hora</label><input type="time" id="time" value={time} onChange={e => setTime(e.target.value)} required className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"/></div><div><label htmlFor="maxStudents" className="block text-sm font-medium text-gray-700">Máx. Alunos</label><input type="number" id="maxStudents" value={maxStudents} onChange={e => setMaxStudents(e.target.value)} min="1" required className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"/></div><div><label htmlFor="classType" className="block text-sm font-medium text-gray-700">Modalidade</label><select id="classType" value={classType} onChange={e => setClassType(e.target.value)} required className="mt-1 block w-full border-gray-300 rounded-md shadow-sm">{currentUser.specialties.map(s => <option key={s} value={s}>{s}</option>)}</select></div></div><button type="submit" className="w-full md:w-auto px-6 py-2 text-sm font-bold text-black bg-[#ddfb3b] rounded-full hover:opacity-90">Salvar Aula</button></form></div>)}<MonthNavigator displayedDate={displayedDate} onPrevious={onPreviousMonth} onNext={onNextMonth} /><div className="space-y-6">{classes.length > 0 ? classes.map(cls => { const checkedIn = cls.checkedInStudents.map(studentId => students.find(s => s.id === studentId)).filter(Boolean); const classDate = cls.date.toLocaleDateString('pt-BR', { weekday: 'long', day: '2-digit', month: '2-digit' }); const classTime = cls.date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }); return (<div key={cls.id} className="bg-white p-5 rounded-lg shadow-sm"><div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-4"><div className="text-left mr-auto"><p className="font-bold text-lg text-black capitalize">{cls.type}: {classDate} - {classTime}</p><p className="text-sm font-semibold text-gray-700">Check-ins: {checkedIn.length} / {cls.maxStudents}</p></div><button onClick={() => onDeleteClass(cls.id)} className="mt-2 md:mt-0 px-4 py-1 text-xs font-semibold text-red-700 bg-red-100 rounded-full hover:bg-red-200">Excluir</button></div><div><h4 className="font-semibold text-black mb-2">Alunos com Check-in:</h4>{checkedIn.length > 0 ? (<ul className="list-disc list-inside space-y-1">{checkedIn.map(student => <li key={student.id} className="text-gray-700">{student.name}</li>)}</ul>) : (<p className="text-sm text-gray-500 italic">Nenhum aluno fez check-in ainda.</p>)}</div></div>);}) : <p className="text-center text-gray-500 bg-white p-8 rounded-lg">Nenhuma aula sua marcada para este mês.</p>}</div></div>);
}

function AdminDashboard({ allUsers, setUsers, onCreateUser, allClasses, setClasses, onCreateClass, onDeleteClass, displayedDate, onPreviousMonth, onNextMonth, onResetPassword, onAddExtraClasses }) {
    const [view, setView] = useState('users');
    const [editingUser, setEditingUser] = useState(null);
    const [userForm, setUserForm] = useState({ name: '', username: '', status: 'active', phone: '', email: '', birthDate: '', planTotal: 0, enrolledIn: [], specialties: [] });
    const [extraClassesToAdd, setExtraClassesToAdd] = useState(0);
    const [showCreateUserForm, setShowCreateUserForm] = useState(false);
    const [newUserForm, setNewUserForm] = useState({ name: '', username: '', role: 'student', plan: 8, phone: '', email: '', birthDate: '' });
    const [editingClass, setEditingClass] = useState(null);
    const [showCreateClassForm, setShowCreateClassForm] = useState(false);
    const [classForm, setClassForm] = useState({ date: '', time: '', maxStudents: 10, teacherId: '', type: '' });
    const [searchTerm, setSearchTerm] = useState('');
    const teachers = allUsers.filter(u => u.role === 'teacher');
    
    const handleEditUserClick = (user) => { 
        setEditingUser(user); 
        setUserForm({ name: user.name, username: user.username, status: user.status, phone: user.phone || '', email: user.email || '', birthDate: user.birthDate || '', planTotal: user.plan?.total || 0, enrolledIn: user.enrolledIn || [], specialties: user.specialties || [] });
        setExtraClassesToAdd(0);
    };

    const handleUserFormChange = (e, field, isCheckbox = false) => {
        let { value, checked } = e.target;
        if(isCheckbox){
            const currentValues = userForm[field] || [];
            if(checked){ setUserForm({...userForm, [field]: [...currentValues, value]}); } 
            else { setUserForm({...userForm, [field]: currentValues.filter(v => v !== value)}); }
        } else {
             if (field === 'phone') {
                value = maskPhone(value);
            }
            setUserForm({...userForm, [field]: value});
        }
    };
     const handleNewUserFormChange = (e, field) => {
        let { value } = e.target;
        if (field === 'phone') {
            value = maskPhone(value);
        }
        setNewUserForm({...newUserForm, [field]: value});
    };
    
    const handleSaveUser = () => {
        setUsers(currentUsers => currentUsers.map(u => {
            if(u.id === editingUser.id) {
                return { ...u, name: userForm.name, username: userForm.username, status: userForm.status, phone: userForm.phone.replace(/\D/g,''), email: userForm.email, birthDate: userForm.birthDate, plan: u.plan ? {...u.plan, total: parseInt(userForm.planTotal, 10)} : null, enrolledIn: userForm.enrolledIn, specialties: userForm.specialties };
            }
            return u;
        }));
        if(extraClassesToAdd > 0){ onAddExtraClasses(editingUser.id, extraClassesToAdd); }
        setEditingUser(null);
    };
    
    const handleCreateUser = (e) => {
        e.preventDefault();
        if(!newUserForm.name || !newUserForm.username) return;
        onCreateUser({ ...newUserForm, phone: newUserForm.phone.replace(/\D/g,''), password: 'password', plan: newUserForm.role === 'student' ? { name: `Plano ${newUserForm.plan} Aulas`, total: parseInt(newUserForm.plan), extraClasses: [] } : null, enrolledIn: newUserForm.role === 'student' ? ['Futevôlei'] : [], specialties: newUserForm.role === 'teacher' ? ['Futevôlei'] : [], status: 'active', });
        setShowCreateUserForm(false);
        setNewUserForm({ name: '', username: '', role: 'student', plan: 8, phone: '', email: '', birthDate: '' });
    };

    const handleCreateClass = (e) => { e.preventDefault(); const { date, time, maxStudents, teacherId, type } = classForm; if(date && time && teacherId && type) { const [year, month, day] = date.split('-'); const [hour, minute] = time.split(':'); onCreateClass({ date: new Date(year, month - 1, day, hour, minute), maxStudents: parseInt(maxStudents), type }, parseInt(teacherId)); setShowCreateClassForm(false); setClassForm({ date: '', time: '', maxStudents: 10, teacherId: '', type: ''}); } else { alert("Por favor, preencha todos os campos."); } };
    const handleEditClassClick = (cls) => { setEditingClass(cls); const date = new Date(cls.date); setClassForm({ date: date.toISOString().split('T')[0], time: date.toTimeString().substring(0,5), maxStudents: cls.maxStudents, teacherId: cls.teacherId, type: cls.type }); };
    const handleUpdateClass = () => { if(!editingClass) return; const { date, time, maxStudents, teacherId, type } = classForm; if(date && time && teacherId && type) { const [year, month, day] = date.split('-'); const [hour, minute] = time.split(':'); const newDate = new Date(year, month - 1, day, hour, minute); setClasses(prevClasses => prevClasses.map(c => c.id === editingClass.id ? { ...c, date: newDate, maxStudents: parseInt(maxStudents), teacherId: parseInt(teacherId), type } : c)); setEditingClass(null); setClassForm({ date: '', time: '', maxStudents: 10, teacherId: '', type: ''}); } else { alert("Por favor, preencha todos os campos."); } };
    
    const filteredUsers = useMemo(() => { if (!searchTerm) return allUsers.filter(u=>u.role!=='admin'); const term = searchTerm.toLowerCase(); return allUsers.filter(u => u.role !== 'admin' && (u.name.toLowerCase().includes(term) || u.username.toLowerCase().includes(term) || (u.phone && u.phone.includes(term.replace(/\D/g,''))))); }, [allUsers, searchTerm]);
    const filteredAndSortedClasses = useMemo(() => allClasses.filter(c => c.date.getFullYear() === displayedDate.getFullYear() && c.date.getMonth() === displayedDate.getMonth()).sort((a, b) => a.date - b.date), [allClasses, displayedDate]);

    const commonModalFields = (form, handler) => (<div className="grid grid-cols-1 md:grid-cols-2 gap-4"><div><label>Nome</label><input type="text" value={form.name} onChange={(e) => handler(e, 'name')} className="w-full mt-1 p-2 border rounded-md"/></div><div><label>Username</label><input type="text" value={form.username} onChange={(e) => handler(e, 'username')} className="w-full mt-1 p-2 border rounded-md"/></div><div><label>Email</label><input type="email" value={form.email} onChange={(e) => handler(e, 'email')} className="w-full mt-1 p-2 border rounded-md"/></div><div><label>Telefone/Whats</label><input type="tel" value={form.phone} onChange={(e) => handler(e, 'phone')} className="w-full mt-1 p-2 border rounded-md"/></div><div><label>Data de Nascimento</label><input type="date" value={form.birthDate} onChange={(e) => handler(e, 'birthDate')} className="w-full mt-1 p-2 border rounded-md"/></div></div>);
    const UserList = ({ title, users, onEditClick }) => (<div className="bg-white p-6 rounded-lg shadow-md"><h3 className="text-xl font-bold text-black mb-4 flex items-center gap-2">{title === 'Professores' ? <Shield className="text-[#ddfb3b]"/> : <Users className="text-[#ddfb3b]"/>} {title} ({users.length})</h3><div className="space-y-3">{users.map(user => (<div key={user.id} className={`p-3 border rounded-md flex justify-between items-center ${user.status === 'inactive' ? 'bg-gray-50 opacity-60' : ''}`}><div className="flex items-center gap-3"><span className={`w-3 h-3 rounded-full ${user.status === 'active' ? 'bg-green-500' : 'bg-red-500'}`}></span><div><p className="font-semibold text-black">{user.name}</p><p className="text-sm text-gray-600">@{user.username}</p><p className="text-sm text-gray-500">{maskPhone(user.phone)}</p></div></div><button onClick={() => onEditClick(user)} className="p-2 hover:bg-gray-100 rounded-full"><Edit3 className="w-4 h-4 text-gray-600"/></button></div>))}</div></div>);
    const ClassItem = ({ cls, allUsers, onDeleteClass, onEditClass }) => { const teacher = allUsers.find(u => u.id === cls.teacherId); return ( <div className="bg-white p-5 rounded-lg shadow-sm flex justify-between items-center"><div><p className="font-bold text-black">{cls.type}: {cls.date.toLocaleDateString('pt-BR')} - {cls.date.toLocaleTimeString('pt-BR', {hour:'2-digit', minute:'2-digit'})}</p><p className="text-sm text-gray-600">Prof: {teacher?.name || 'N/A'}</p><p className="text-sm text-gray-600">Alunos: {cls.checkedInStudents.length}/{cls.maxStudents}</p></div><div className="flex gap-2"><button onClick={() => onEditClass(cls)} className="p-2 text-sm font-semibold text-blue-700 bg-blue-100 rounded-full hover:bg-blue-200"><Repeat className="w-4 h-4"/></button><button onClick={() => onDeleteClass(cls.id)} className="p-2 text-sm font-semibold text-red-700 bg-red-100 rounded-full hover:bg-red-200"><X className="w-4 h-4"/></button></div></div>)};

    const UserManagementView = () => (<>
        <div className="flex justify-between items-center mb-6"><div className="relative flex-grow mr-4"><Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"/><input type="text" placeholder="Buscar por nome, usuário ou telefone..." value={searchTerm} onChange={e => setSearchTerm(e.target.value)} className="w-full pl-10 pr-4 py-2 border rounded-full"/></div><button onClick={() => setShowCreateUserForm(!showCreateUserForm)} className="flex-shrink-0 flex items-center gap-2 px-4 py-2 text-sm font-bold text-black bg-[#ddfb3b] rounded-full hover:opacity-90"><PlusCircle className="h-5 w-5" />{showCreateUserForm ? 'Fechar' : 'Novo Usuário'}</button></div>
        {showCreateUserForm && (<div className="bg-white p-6 rounded-xl shadow-md"><form onSubmit={handleCreateUser} className="space-y-4"><h3 className="text-lg font-semibold text-black">Criar Novo Usuário</h3>{commonModalFields(newUserForm, handleNewUserFormChange)}<div><label>Função</label><select value={newUserForm.role} onChange={e => setNewUserForm({...newUserForm, role: e.target.value})} className="mt-1 block w-full"><option value="student">Aluno</option><option value="teacher">Professor</option></select></div>{newUserForm.role === 'student' && (<div><label>Créditos/Mês</label><input type="number" value={newUserForm.plan} onChange={e => setNewUserForm({...newUserForm, plan: e.target.value})} required className="mt-1 block w-full"/></div>)}<button type="submit" className="px-6 py-2 text-sm font-bold text-black bg-[#ddfb3b] rounded-full hover:opacity-90">Salvar Usuário</button></form></div>)}
        <div className="grid md:grid-cols-2 gap-8"><UserList title="Alunos" users={filteredUsers.filter(u=>u.role==='student')} onEditClick={handleEditUserClick} /><UserList title="Professores" users={filteredUsers.filter(u=>u.role==='teacher')} onEditClick={handleEditUserClick} /></div>
    </>);
    const ClassManagementView = () => (<>
        <div className="flex justify-between items-center mb-6"><h2 className="text-2xl font-bold text-black">Gerenciar Aulas</h2><button onClick={() => { setShowCreateClassForm(!showCreateClassForm); setEditingClass(null); setClassForm({ date: '', time: '', maxStudents: 10, teacherId: '', type: ''}); }} className="flex items-center gap-2 px-4 py-2 text-sm font-bold text-black bg-[#ddfb3b] rounded-full hover:opacity-90"><PlusCircle className="h-5 w-5" />{showCreateClassForm ? 'Fechar' : 'Nova Aula'}</button></div>
        {showCreateClassForm && (<div className="bg-white p-6 rounded-xl shadow-md"><form onSubmit={handleCreateClass} className="space-y-4"><h3 className="text-lg font-semibold text-black">Adicionar Nova Aula</h3><div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"><div><label>Data</label><input type="date" value={classForm.date} onChange={e => setClassForm({...classForm, date: e.target.value})} required className="mt-1 block w-full"/></div><div><label>Hora</label><input type="time" value={classForm.time} onChange={e => setClassForm({...classForm, time: e.target.value})} required className="mt-1 block w-full"/></div><div><label>Máx. Alunos</label><input type="number" value={classForm.maxStudents} onChange={e => setClassForm({...classForm, maxStudents: e.target.value})} min="1" required className="mt-1 block w-full"/></div><div><label>Modalidade</label><select value={classForm.type} onChange={e => setClassForm({...classForm, type: e.target.value, teacherId: ''})} required className="mt-1 block w-full"><option value="" disabled>Selecione...</option>{CLASS_TYPES.map(t => <option key={t} value={t}>{t}</option>)}</select></div><div><label>Professor</label><select value={classForm.teacherId} onChange={e => setClassForm({...classForm, teacherId: e.target.value})} required className="mt-1 block w-full" disabled={!classForm.type}><option value="" disabled>Selecione...</option>{teachers.filter(t => t.specialties.includes(classForm.type)).map(t => <option key={t.id} value={t.id}>{t.name}</option>)}</select></div></div><button type="submit" className="w-full md:w-auto px-6 py-2 text-sm font-bold text-black bg-[#ddfb3b] rounded-full hover:opacity-90">Salvar Aula</button></form></div>)}
        <MonthNavigator displayedDate={displayedDate} onPrevious={onPreviousMonth} onNext={onNextMonth} /><div className="space-y-4">{filteredAndSortedClasses.map(cls => <ClassItem key={cls.id} cls={cls} allUsers={allUsers} onDeleteClass={onDeleteClass} onEditClass={handleEditClassClick} />)}</div>
    </>);

    return (
        <div className="p-4 md:p-8 space-y-8">
            <div className="flex justify-center border-b border-gray-200 mb-6"><button onClick={() => setView('users')} className={`px-6 py-3 font-semibold ${view === 'users' ? 'border-b-2 border-[#ddfb3b] text-black' : 'text-gray-500'}`}>Usuários</button><button onClick={() => setView('classes')} className={`px-6 py-3 font-semibold ${view === 'classes' ? 'border-b-2 border-[#ddfb3b] text-black' : 'text-gray-500'}`}>Aulas</button></div>
            {editingUser && (<div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4"><div className="bg-white rounded-lg p-6 space-y-4 w-full max-w-2xl max-h-[90vh] overflow-y-auto"><h3 className="text-xl font-bold">Editando {userForm.name}</h3>{commonModalFields(userForm, handleUserFormChange)}<div><label className="font-semibold">Status</label><select value={userForm.status} onChange={(e) => handleUserFormChange(e, 'status')} className="w-full mt-1 p-2 border rounded-md"><option value="active">Ativo</option><option value="inactive">Inativo</option></select></div>{editingUser.role === 'student' && (<><div><label className="font-semibold">Plano Mensal:</label><input type="number" value={userForm.planTotal} onChange={(e) => handleUserFormChange(e, 'planTotal')} className="w-full mt-1 p-2 border rounded-md"/></div><div><label className="font-semibold">Aulas Extras (este mês):</label><input type="number" value={extraClassesToAdd} onChange={(e) => setExtraClassesToAdd(parseInt(e.target.value) || 0)} className="w-full mt-1 p-2 border rounded-md"/></div><div><label className="font-semibold">Modalidades:</label><div className="grid grid-cols-2 lg:grid-cols-3 gap-2 mt-1">{CLASS_TYPES.map(type => (<label key={type} className="flex items-center gap-2"><input type="checkbox" value={type} checked={userForm.enrolledIn.includes(type)} onChange={(e) => handleUserFormChange(e, 'enrolledIn', true)}/>{type}</label>))}</div></div></>)}{editingUser.role === 'teacher' && (<div><label className="font-semibold">Especialidades:</label><div className="grid grid-cols-2 lg:grid-cols-3 gap-2 mt-1">{CLASS_TYPES.map(type => (<label key={type} className="flex items-center gap-2"><input type="checkbox" value={type} checked={userForm.specialties.includes(type)} onChange={(e) => handleUserFormChange(e, 'specialties', true)}/>{type}</label>))}</div></div>)}<button onClick={() => onResetPassword(editingUser.id)} className="text-sm text-blue-600 hover:underline">Redefinir Senha</button><div className="flex justify-end gap-3 pt-4"><button onClick={() => setEditingUser(null)} className="px-4 py-2 text-sm rounded-md border">Cancelar</button><button onClick={handleSaveUser} className="px-4 py-2 text-sm rounded-md bg-[#ddfb3b] text-black font-bold">Salvar Alterações</button></div></div></div>)}
            {editingClass && (<div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4"><div className="bg-white p-6 rounded-xl shadow-md w-full max-w-2xl"><form onSubmit={(e) => { e.preventDefault(); handleUpdateClass(); }} className="space-y-4"><h3 className="text-lg font-semibold text-black">Editar Aula</h3><div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"><div><label>Data</label><input type="date" value={classForm.date} onChange={e => setClassForm({...classForm, date: e.target.value})} required className="mt-1 block w-full"/></div><div><label>Hora</label><input type="time" value={classForm.time} onChange={e => setClassForm({...classForm, time: e.target.value})} required className="mt-1 block w-full"/></div><div><label>Máx. Alunos</label><input type="number" value={classForm.maxStudents} onChange={e => setClassForm({...classForm, maxStudents: e.target.value})} min="1" required className="mt-1 block w-full"/></div><div><label>Modalidade</label><select value={classForm.type} onChange={e => setClassForm({...classForm, type: e.target.value, teacherId: ''})} required className="mt-1 block w-full"><option value="" disabled>Selecione...</option>{CLASS_TYPES.map(t => <option key={t} value={t}>{t}</option>)}</select></div><div><label>Professor</label><select value={classForm.teacherId} onChange={e => setClassForm({...classForm, teacherId: e.target.value})} required className="mt-1 block w-full" disabled={!classForm.type}><option value="" disabled>Selecione...</option>{teachers.filter(t => t.specialties.includes(classForm.type)).map(t => <option key={t.id} value={t.id}>{t.name}</option>)}</select></div></div><div className="flex justify-end gap-3"><button type="button" onClick={() => setEditingClass(null)} className="px-4 py-2 rounded-md border">Cancelar</button><button type="submit" className="px-4 py-2 rounded-md bg-[#ddfb3b] text-black font-bold">Salvar Alterações</button></div></form></div></div>)}
            {view === 'users' ? <UserManagementView /> : <ClassManagementView />}
        </div>
    );
}

function ProfilePage({ currentUser, onUpdatePassword, onBack }) {
    const [oldPassword, setOldPassword] = useState(''); const [newPassword, setNewPassword] = useState(''); const [confirmPassword, setConfirmPassword] = useState(''); const [error, setError] = useState(''); const [success, setSuccess] = useState('');
    const handleSubmit = (e) => { e.preventDefault(); setError(''); setSuccess(''); if (newPassword !== confirmPassword) { setError('As novas senhas não coincidem.'); return; } onUpdatePassword(currentUser.id, oldPassword, newPassword, (err) => { if (err) { setError(err); } else { setSuccess('Senha alterada com sucesso!'); setOldPassword(''); setNewPassword(''); setConfirmPassword(''); } }); };
    return (<div className="p-4 md:p-8 max-w-lg mx-auto"><h2 className="text-2xl font-bold text-black mb-6">Meu Perfil</h2><div className="bg-white p-6 rounded-xl shadow-md"><form onSubmit={handleSubmit} className="space-y-4"><h3 className="text-lg font-semibold text-black">Alterar Senha</h3><div><label className="block text-sm font-medium text-gray-700">Senha Atual</label><input type="password" value={oldPassword} onChange={e => setOldPassword(e.target.value)} required className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"/></div><div><label className="block text-sm font-medium text-gray-700">Nova Senha</label><input type="password" value={newPassword} onChange={e => setNewPassword(e.target.value)} required className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"/></div><div><label className="block text-sm font-medium text-gray-700">Confirmar Nova Senha</label><input type="password" value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)} required className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"/></div>{error && <p className="text-sm text-red-600">{error}</p>}{success && <p className="text-sm text-green-600">{success}</p>}<div className="flex justify-between items-center pt-2"><button type="button" onClick={onBack} className="text-sm text-gray-600 hover:underline">Voltar</button><button type="submit" className="px-6 py-2 text-sm font-bold text-black bg-[#ddfb3b] rounded-full hover:opacity-90">Salvar</button></div></form></div></div>);
}

// --- Componente Principal da Aplicação ---
export default function App() {
  const [currentUser, setCurrentUser] = useState(null); const [users, setUsers] = useState(initialUsers); const [classes, setClasses] = useState(initialClasses); const [modalState, setModalState] = useState({ isOpen: false, classId: null }); const [displayedDate, setDisplayedDate] = useState(new Date(today.getFullYear(), today.getMonth(), 1)); const [view, setView] = useState('dashboard');
  const handleLogin = (username, password, callback) => { const user = users.find(u => u.username.toLowerCase() === username.toLowerCase() && u.password === password); if(user) { if(user.status === 'active'){ setCurrentUser(user); setView('dashboard');} else { callback('Usuário inativo. Por favor, entre em contato com o suporte.'); }} else { callback('Usuário ou senha inválidos.'); }};
  const handleLogout = () => {setCurrentUser(null); setView('dashboard');};
  const handleUpdatePassword = (userId, oldPassword, newPassword, callback) => { const user = users.find(u => u.id === userId); if (user && user.password === oldPassword) { setUsers(prevUsers => prevUsers.map(u => u.id === userId ? { ...u, password: newPassword } : u)); callback(null); } else { callback('A senha atual está incorreta.'); }};
  const handleResetPassword = (userId) => { if(window.confirm('Tem certeza que deseja redefinir a senha deste usuário para "password"?')) { setUsers(prevUsers => prevUsers.map(u => u.id === userId ? { ...u, password: 'password' } : u)); alert('Senha redefinida com sucesso!'); }};
  const handleAddExtraClasses = (userId, count) => { const monthIdentifier = `${displayedDate.getFullYear()}-${displayedDate.getMonth()}`; setUsers(prevUsers => prevUsers.map(u => { if (u.id === userId) { const newPlan = { ...u.plan }; let extraClasses = [...(newPlan.extraClasses || [])]; const monthIndex = extraClasses.findIndex(e => e.month === monthIdentifier); if (monthIndex > -1) { extraClasses[monthIndex] = { ...extraClasses[monthIndex], count: extraClasses[monthIndex].count + count }; } else { extraClasses.push({ month: monthIdentifier, count }); } return { ...u, plan: { ...newPlan, extraClasses } }; } return u; })); };
  const handleCheckIn = (studentId, classId) => { const student = users.find(u => u.id === studentId); const aClass = classes.find(c => c.id === classId); if (!student || !aClass) return; if (student.checkedInClassIds.includes(classId)) return; const usedClassesInMonth = student.checkedInClassIds.filter(id => {const c = classes.find(cls => cls.id === id); return c && c.date.getFullYear() === aClass.date.getFullYear() && c.date.getMonth() === aClass.date.getMonth();}).length; const extraClassesForMonth = student.plan.extraClasses?.find(ec => ec.month === `${aClass.date.getFullYear()}-${aClass.date.getMonth()}`)?.count || 0; if (student.plan.total + extraClassesForMonth - usedClassesInMonth <= 0) { alert("Você não tem créditos de aula suficientes para este mês."); return; } if (aClass.checkedInStudents.length >= aClass.maxStudents) { alert("Esta turma já está cheia."); return; } setUsers(currentUsers => currentUsers.map(u => u.id === studentId ? { ...u, checkedInClassIds: [...u.checkedInClassIds, classId] } : u)); setClasses(currentClasses => currentClasses.map(c => c.id === classId ? { ...c, checkedInStudents: [...c.checkedInStudents, studentId] } : c)); };
  const handleCancelCheckIn = (studentId, classId) => { setUsers(currentUsers => currentUsers.map(u => u.id === studentId ? { ...u, checkedInClassIds: u.checkedInClassIds.filter(id => id !== classId) } : u)); setClasses(currentClasses => currentClasses.map(c => c.id === classId ? { ...c, checkedInStudents: c.checkedInStudents.filter(id => id !== studentId) } : c)); };
  const handleCreateClass = (newClassData, teacherId) => setClasses(prev => [...prev, { id: Date.now(), ...newClassData, teacherId, checkedInStudents: [] }]);
  const handleCreateUser = (newUserData) => setUsers(prev => [...prev, { id: Date.now(), ...newUserData, checkedInClassIds: [] }]);
  const handleDeleteRequest = (classId) => setModalState({ isOpen: true, classId: classId });
  const handleConfirmDelete = () => { const { classId } = modalState; if (!classId) return; setUsers(currentUsers => currentUsers.map(user => { if (user.role === 'student' && user.checkedInClassIds.includes(classId)) { return { ...user, checkedInClassIds: user.checkedInClassIds.filter(id => id !== classId) };} return user; })); setClasses(currentClasses => currentClasses.filter(c => c.id !== classId)); setModalState({ isOpen: false, classId: null }); };
  const handlePreviousMonth = () => setDisplayedDate(current => new Date(current.getFullYear(), current.getMonth() - 1, 1));
  const handleNextMonth = () => setDisplayedDate(current => new Date(current.getFullYear(), current.getMonth() + 1, 1));
  const filteredAndSortedClasses = useMemo(() => { const baseFilter = classes.filter(c => c.date.getFullYear() === displayedDate.getFullYear() && c.date.getMonth() === displayedDate.getMonth()); if (currentUser?.role === 'teacher') return baseFilter.filter(c => c.teacherId === currentUser.id).sort((a,b) => a.date - b.date); if (currentUser?.role === 'student') return baseFilter.filter(c => currentUser.enrolledIn.includes(c.type)).sort((a,b) => a.date - b.date); return baseFilter.sort((a, b) => a.date - b.date); }, [classes, displayedDate, currentUser]);
  const studentDataForDashboard = useMemo(() => { if (currentUser?.role !== 'student') return null; const student = users.find(u => u.id === currentUser.id); if (!student) return null; const usedInMonth = student.checkedInClassIds.filter(id => { const c = classes.find(cls => cls.id === id); return c && c.date.getFullYear() === displayedDate.getFullYear() && c.date.getMonth() === displayedDate.getMonth();}).length; return { ...student, plan: { ...student.plan, usedInMonth }}; }, [currentUser, users, classes, displayedDate]);

  if (!currentUser) return <LoginPage onLogin={handleLogin} />;
  
  return (<div className="min-h-screen bg-gray-100 font-sans"><ConfirmModal isOpen={modalState.isOpen} onClose={() => setModalState({ isOpen: false, classId: null })} onConfirm={handleConfirmDelete} title="Excluir Aula"><p>Tem certeza que deseja excluir esta aula? Os check-ins dos alunos serão cancelados.</p></ConfirmModal><header className="bg-white shadow-md sticky top-0 z-40"><div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center"><h1 className="text-2xl font-bold text-black cursor-pointer" onClick={() => setView('dashboard')}>Complecso</h1><div className="flex items-center gap-4"><span className="text-gray-800 hidden sm:block">Bem-vindo(a), <strong>{currentUser.name}</strong></span><button onClick={() => setView('profile')} className="p-2 rounded-full hover:bg-gray-200"><UserCog className="h-5 w-5 text-gray-600"/></button><button onClick={handleLogout} className="flex items-center gap-2 text-sm text-gray-600 hover:text-black"><LogOut className="h-5 w-5" />Sair</button></div></div></header><main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">{view === 'profile' ? (<ProfilePage currentUser={currentUser} onUpdatePassword={handleUpdatePassword} onBack={() => setView('dashboard')} />) : (<>{currentUser.role === 'admin' && (<AdminDashboard allUsers={users} setUsers={setUsers} onCreateUser={handleCreateUser} allClasses={classes} setClasses={setClasses} onCreateClass={handleCreateClass} onDeleteClass={handleDeleteRequest} displayedDate={displayedDate} onPreviousMonth={handlePreviousMonth} onNextMonth={handleNextMonth} onResetPassword={handleResetPassword} onAddExtraClasses={handleAddExtraClasses} />)}{currentUser.role === 'student' && studentDataForDashboard && (<StudentDashboard student={studentDataForDashboard} classes={filteredAndSortedClasses} allUsers={users} onCheckIn={handleCheckIn} onCancelCheckIn={handleCancelCheckIn} displayedDate={displayedDate} onPreviousMonth={handlePreviousMonth} onNextMonth={handleNextMonth} />)}{currentUser.role === 'teacher' && (<TeacherDashboard currentUser={currentUser} classes={filteredAndSortedClasses} users={users} onCreateClass={handleCreateClass} onDeleteClass={handleDeleteRequest} displayedDate={displayedDate} onPreviousMonth={handlePreviousMonth} onNextMonth={handleNextMonth} />)}</>)}</main></div>);
}
